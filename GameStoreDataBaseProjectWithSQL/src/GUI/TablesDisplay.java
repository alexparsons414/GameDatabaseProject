/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAO.*;
import Core.*;
import javax.swing.*;
import TableModels.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Doubl
 */
public class TablesDisplay extends javax.swing.JFrame {

    private AccessoryDAO accessoryDAO;
    private CorporateDAO corporateDAO;
    private CustomersDAO customersDAO;
    private DistrictDAO districtDAO;
    private EmployeesDAO employeesDAO;
    private GameDAO gameDAO;
    private GameStoreDAO gameStoreDAO;
    private HasDAO hasDAO;
    private ProductDAO productDAO;
    private ReserveDAO reserveDAO;
    private SupplierDAO supplierDAO;
    private SuppliesDAO suppliesDAO;
    private int x = -1;
    /**
     * Creates new form TablesDisplay
     */
    public TablesDisplay() {
        try{
            accessoryDAO = new AccessoryDAO();
            corporateDAO = new CorporateDAO();
            customersDAO = new CustomersDAO();
            districtDAO = new DistrictDAO();
            employeesDAO = new EmployeesDAO();
            gameDAO = new GameDAO();
            gameStoreDAO = new GameStoreDAO();
            hasDAO = new HasDAO();
            productDAO = new ProductDAO();
            reserveDAO = new ReserveDAO();
            supplierDAO = new SupplierDAO();
            suppliesDAO = new SuppliesDAO();
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(this,"Error:"+exc,"Error",JOptionPane.ERROR_MESSAGE);
        }
        initComponents();
        gameBtn.setVisible(false);
        accessoryBtn.setVisible(false);
        this.setTitle("Data Tables");
        table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        corporateBtn = new javax.swing.JToggleButton();
        districtBtn = new javax.swing.JToggleButton();
        strBtn = new javax.swing.JToggleButton();
        employeeBtn = new javax.swing.JToggleButton();
        customerBtn = new javax.swing.JToggleButton();
        supplierBtn = new javax.swing.JToggleButton();
        productBtn = new javax.swing.JToggleButton();
        accessoryBtn = new javax.swing.JToggleButton();
        gameBtn = new javax.swing.JToggleButton();
        suppliesBtn = new javax.swing.JToggleButton();
        hasBtn = new javax.swing.JToggleButton();
        reserveBtn = new javax.swing.JToggleButton();
        updateBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        tableNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        corporateBtn.setText("Corporate Offices");
        corporateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corporateBtnActionPerformed(evt);
            }
        });

        districtBtn.setText("Districts");
        districtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                districtBtnActionPerformed(evt);
            }
        });

        strBtn.setText("Game Stores");
        strBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strBtnActionPerformed(evt);
            }
        });

        employeeBtn.setText("Employees");
        employeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeBtnActionPerformed(evt);
            }
        });

        customerBtn.setText("Customers");
        customerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerBtnActionPerformed(evt);
            }
        });

        supplierBtn.setText("Suppliers");
        supplierBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierBtnActionPerformed(evt);
            }
        });

        productBtn.setText("Products");
        productBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productBtnActionPerformed(evt);
            }
        });

        accessoryBtn.setText("Accessories");
        accessoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessoryBtnActionPerformed(evt);
            }
        });

        gameBtn.setText("Games");
        gameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameBtnActionPerformed(evt);
            }
        });

        suppliesBtn.setText("Supplier Product Relationship");
        suppliesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliesBtnActionPerformed(evt);
            }
        });

        hasBtn.setText("Game Store Customer Relationship");
        hasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasBtnActionPerformed(evt);
            }
        });

        reserveBtn.setText("Reservations");
        reserveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(productBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(gameBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(accessoryBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                    .addComponent(hasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(corporateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(districtBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(strBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(employeeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(supplierBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(suppliesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reserveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(corporateBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(districtBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(strBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reserveBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(hasBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(supplierBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suppliesBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accessoryBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameBtn))
        );

        updateBtn.setText("Update Current Table");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        tableNameLabel.setText("TableName");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(387, 387, 387)
                .addComponent(tableNameLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableNameLabel)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void corporateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corporateBtnActionPerformed
        try
        {
            if(corporateBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Corporate> offices = corporateDAO.getAllCorporateOffices();

                CorporateTableModel model = new CorporateTableModel(offices);

                table.setModel(model);
                tableNameLabel.setText("Corporate Offices");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                customerBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                reserveBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                x = 0;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            corporateBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_corporateBtnActionPerformed

    private void districtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_districtBtnActionPerformed
        try
        {
            if(districtBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<District> districts = districtDAO.getAllDistricts();

                DistrictTableModel model = new DistrictTableModel(districts);

                table.setModel(model);
                tableNameLabel.setText("Districts");
                
                corporateBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                customerBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 1;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            districtBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_districtBtnActionPerformed

    private void supplierBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierBtnActionPerformed
        try
        {
            if(supplierBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Supplier> suppliers = supplierDAO.getAllSuppliers();

                SupplierTableModel model = new SupplierTableModel(suppliers);

                table.setModel(model);
                tableNameLabel.setText("Suppliers");
                
                districtBtn.setSelected(false);
                corporateBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                customerBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 2;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            supplierBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_supplierBtnActionPerformed

    private void strBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strBtnActionPerformed
        try
        {
            if(strBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<GameStore> stores = gameStoreDAO.getAllGameStores();

                GameStoreTableModel model = new GameStoreTableModel(stores);

                table.setModel(model);
                tableNameLabel.setText("Game Stores");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                corporateBtn.setSelected(false);
                employeeBtn.setSelected(false);
                customerBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 3;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            strBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_strBtnActionPerformed

    private void employeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeBtnActionPerformed
        try
        {
            if(employeeBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Employees> employees = employeesDAO.getAllEmployees();

                EmployeesTableModel model = new EmployeesTableModel(employees);

                table.setModel(model);
                tableNameLabel.setText("Employees");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                corporateBtn.setSelected(false);
                customerBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 4;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            employeeBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_employeeBtnActionPerformed

    private void customerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerBtnActionPerformed
        try
        {
            if(customerBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Customers> customers = customersDAO.getAllCustomers();

                CustomersTableModel model = new CustomersTableModel(customers);

                table.setModel(model);
                tableNameLabel.setText("Customers");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 5;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            customerBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_customerBtnActionPerformed

    private void productBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productBtnActionPerformed
        try
        {
            if(productBtn.isSelected()){
                gameBtn.setVisible(true);
                accessoryBtn.setVisible(true);
                List<Product> products = productDAO.getAllProducts();

                ProductTableModel model = new ProductTableModel(products);

                table.setModel(model);
                tableNameLabel.setText("Products");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                customerBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 6;
            }
            else{
                if(!gameBtn.isSelected() || !accessoryBtn.isSelected()){
                    gameBtn.setVisible(false);
                    accessoryBtn.setVisible(false);
                }
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            productBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_productBtnActionPerformed

    private void accessoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessoryBtnActionPerformed
        try
        {
            if(accessoryBtn.isSelected()){
                List<Accessory> accessories = accessoryDAO.getAllAccessories();

                AccessoryTableModel model = new AccessoryTableModel(accessories);

                table.setModel(model);
                tableNameLabel.setText("Accessories");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                productBtn.setSelected(false);
                customerBtn.setSelected(false);
                gameBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 7;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            accessoryBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accessoryBtnActionPerformed

    private void gameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameBtnActionPerformed
        try
        {
            if(gameBtn.isSelected()){
                List<Game> games = gameDAO.getAllGames();

                GameTableModel model = new GameTableModel(games);

                table.setModel(model);
                tableNameLabel.setText("Games");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                customerBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 8;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            gameBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_gameBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try
        {
            if(x==0)
            {
                CorporateUpdate dialog=new CorporateUpdate(TablesDisplay.this,corporateDAO);
                dialog.setVisible(true);
            }
            if(x==1)
            {
                DistrictUpdate dialog=new DistrictUpdate(TablesDisplay.this,districtDAO);
                dialog.setVisible(true);
            }
            if(x==2)
            {
                SupplierUpdate dialog=new SupplierUpdate(TablesDisplay.this,supplierDAO);
                dialog.setVisible(true);
            }
            if(x==3)
            {
                GameStoreUpdate dialog=new GameStoreUpdate(TablesDisplay.this,gameStoreDAO);
                dialog.setVisible(true);
            }
            if(x==4)
            {
                EmployeesUpdate dialog=new EmployeesUpdate(TablesDisplay.this,employeesDAO);
                dialog.setVisible(true);
            }
            if(x==5)
            {
                CustomersUpdate dialog=new CustomersUpdate(TablesDisplay.this,customersDAO);
                dialog.setVisible(true);
            }
            if(x==6){
                ProductUpdate dialog = new ProductUpdate(TablesDisplay.this,productDAO);
                dialog.setVisible(true);
            }
            if(x==7){
                AccessoryUpdate dialog = new AccessoryUpdate(TablesDisplay.this,accessoryDAO);
                dialog.setVisible(true);
            }
            if(x==8){
                GameUpdate dialog = new GameUpdate(TablesDisplay.this,gameDAO);
                dialog.setVisible(true);
            }
            if(x==9){
                HasUpdate dialog = new HasUpdate(TablesDisplay.this,hasDAO);
                dialog.setVisible(true);
            }
            if(x==10){
                SuppliesUpdate dialog = new SuppliesUpdate(TablesDisplay.this,suppliesDAO);
                dialog.setVisible(true);
            }
            if(x==11){
                ReserveUpdate dialog = new ReserveUpdate(TablesDisplay.this,reserveDAO);
                dialog.setVisible(true);
            }
            else if(x<0||x>11)
            {
                JOptionPane.showMessageDialog(this, "Error. Please select a table.");
            }
        }
        catch(Exception exc)
        {
            JOptionPane.showMessageDialog(this,"Error with button: "+ exc,"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void hasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasBtnActionPerformed
        try
        {
            if(hasBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Has> relations = hasDAO.getAllGameStoreCustomerRelations();

                HasTableModel model = new HasTableModel(relations);

                table.setModel(model);
                tableNameLabel.setText("Game Store Customer Relations");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                customerBtn.setSelected(false);
                gameBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 9;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            hasBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hasBtnActionPerformed

    private void suppliesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliesBtnActionPerformed
        try
        {
            if(suppliesBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Supplies> relations = suppliesDAO.getAllSupplierProductRelations();

                SuppliesTableModel model = new SuppliesTableModel(relations);

                table.setModel(model);
                tableNameLabel.setText("Supplier Product Relations");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                customerBtn.setSelected(false);
                hasBtn.setSelected(false);
                gameBtn.setSelected(false);
                reserveBtn.setSelected(false);
                x = 10;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            suppliesBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_suppliesBtnActionPerformed

    private void reserveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveBtnActionPerformed
        try
        {
            if(reserveBtn.isSelected()){
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Reserve> reservations = reserveDAO.getAllReservations();

                ReserveTableModel model = new ReserveTableModel(reservations);

                table.setModel(model);
                tableNameLabel.setText("Reservations");
                
                districtBtn.setSelected(false);
                supplierBtn.setSelected(false);
                strBtn.setSelected(false);
                employeeBtn.setSelected(false);
                corporateBtn.setSelected(false);
                productBtn.setSelected(false);
                accessoryBtn.setSelected(false);
                customerBtn.setSelected(false);
                hasBtn.setSelected(false);
                suppliesBtn.setSelected(false);
                gameBtn.setSelected(false);
                x = 11;
            }
            else{
                table.setModel(new DefaultTableModel(null,new String[]{"Title 1","Title 2","Title 3","Title 4"}));
                tableNameLabel.setText("TableName");
                x = -1;
            }
        }
        catch(Exception exc)
        {
            reserveBtn.setSelected(false);
            JOptionPane.showMessageDialog(TablesDisplay.this, "Error: " + exc,"Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_reserveBtnActionPerformed

    public void refreshView()
    {
        try
        {
            if(x==0)
            {
                corporateBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Corporate> offices = corporateDAO.getAllCorporateOffices();

                CorporateTableModel model = new CorporateTableModel(offices);

                table.setModel(model);
                tableNameLabel.setText("Corporate Offices");
            }
            if(x==1)
            {
                districtBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<District> districts = districtDAO.getAllDistricts();

                DistrictTableModel model = new DistrictTableModel(districts);

                table.setModel(model);
                tableNameLabel.setText("Districts");
            }
            if(x==2)
            {
                supplierBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Supplier> suppliers = supplierDAO.getAllSuppliers();

                SupplierTableModel model = new SupplierTableModel(suppliers);

                table.setModel(model);
                tableNameLabel.setText("Suppliers");
            }
            if(x==3)
            {
                strBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<GameStore> stores = gameStoreDAO.getAllGameStores();

                GameStoreTableModel model = new GameStoreTableModel(stores);

                table.setModel(model);
                tableNameLabel.setText("Game Stores");
            }
            if(x==4)
            {
                employeeBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Employees> employees = employeesDAO.getAllEmployees();

                EmployeesTableModel model = new EmployeesTableModel(employees);

                table.setModel(model);
                tableNameLabel.setText("Employees");
            }
            if(x==5)
            {
                customerBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Customers> customers = customersDAO.getAllCustomers();

                CustomersTableModel model = new CustomersTableModel(customers);

                table.setModel(model);
                tableNameLabel.setText("Customers");
            }
            if(x==6){
                productBtn.setSelected(true);
                gameBtn.setVisible(true);
                accessoryBtn.setVisible(true);
                
                List<Product> products = productDAO.getAllProducts();

                ProductTableModel model = new ProductTableModel(products);

                table.setModel(model);
                tableNameLabel.setText("Products");
            }
            if(x==7){
                accessoryBtn.setSelected(true);
                gameBtn.setVisible(true);
                accessoryBtn.setVisible(true);
                
                List<Accessory> accessories = accessoryDAO.getAllAccessories();

                AccessoryTableModel model = new AccessoryTableModel(accessories);

                table.setModel(model);
                tableNameLabel.setText("Accessories");
            }
            if(x==8){
                gameBtn.setSelected(true);
                gameBtn.setVisible(true);
                accessoryBtn.setVisible(true);
                
                List<Game> games = gameDAO.getAllGames();

                GameTableModel model = new GameTableModel(games);

                table.setModel(model);
                tableNameLabel.setText("Games");
            }
            if(x==9){
                hasBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Has> relations = hasDAO.getAllGameStoreCustomerRelations();

                HasTableModel model = new HasTableModel(relations);

                table.setModel(model);
                tableNameLabel.setText("Game Store Customer Relations");
            }
            if(x==10){
                suppliesBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Supplies> relations = suppliesDAO.getAllSupplierProductRelations();

                SuppliesTableModel model = new SuppliesTableModel(relations);

                table.setModel(model);
                tableNameLabel.setText("Supplier Product Relations");
            }
            if(x==11){
                reserveBtn.setSelected(true);
                gameBtn.setVisible(false);
                accessoryBtn.setVisible(false);
                
                List<Reserve> reservations = reserveDAO.getAllReservations();

                ReserveTableModel model = new ReserveTableModel(reservations);

                table.setModel(model);
                tableNameLabel.setText("Reservations");
            }
            else if(x<0||x>11)
            {
                JOptionPane.showMessageDialog(this, "Error. Please select a table.");
            }
        }
        catch(Exception exc)
        {
            JOptionPane.showMessageDialog(this,"Error: "+exc,"Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablesDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablesDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablesDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablesDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TablesDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton accessoryBtn;
    private javax.swing.JToggleButton corporateBtn;
    private javax.swing.JToggleButton customerBtn;
    private javax.swing.JToggleButton districtBtn;
    private javax.swing.JToggleButton employeeBtn;
    private javax.swing.JToggleButton gameBtn;
    private javax.swing.JToggleButton hasBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton productBtn;
    private javax.swing.JToggleButton reserveBtn;
    private javax.swing.JToggleButton strBtn;
    private javax.swing.JToggleButton supplierBtn;
    private javax.swing.JToggleButton suppliesBtn;
    private javax.swing.JTable table;
    private javax.swing.JLabel tableNameLabel;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
